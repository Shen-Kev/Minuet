<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Minuet — Spend a minute with</title>
  <link href="https://fonts.googleapis.com/css2?family=Pinyon+Script&display=swap" rel="stylesheet">

  <style>
    /* ------------------
       Ethereal / glowy theme (inspired by PDF & vision image)
       Deep violets + sunrise golds
    ------------------- */
    :root{
      --bg:#110824;           /* deep violet */
      --bg-2:#1a0f34;         /* slightly lighter */
      --panel:rgba(16, 12, 40, 0.55);
      --panel-solid:#1c133d;
      --glass:rgba(255,255,255,0.06);
      --text:#efeaff;
      --muted:#c9b8ff;
      --gold:#ffd166;
      --rose:#d16ba5;
      --lav:#8b5cf6;
      --ok:#58e3a3;
      --warn:#ffc857;
      --err:#ff6b6b;
      --shadow: 0 10px 30px rgba(0,0,0,.4), 0 0 80px rgba(139,92,246,.18);
      --glow: 0 0 20px rgba(255, 209, 102, .35), 0 0 40px rgba(209, 107, 165, .20);
      --radius: 18px;
    }
    *{ box-sizing:border-box }
    html, body{ height:100% }
    body{
      margin:0; font-family: system-ui, -apple-system, "Segoe UI", Roboto, Ubuntu, "Helvetica Neue", Arial, "Noto Sans", "Apple Color Emoji", "Segoe UI Emoji";
      color:var(--text); background: var(--bg);
    }
    a{ color: var(--gold); text-decoration: none }
    a:hover{ text-decoration: underline }
    .wrap{ max-width:1100px; margin:0 auto; padding: 26px 20px 80px }

    /* Background: twinkling + soft gradient */
    body{
      background:
        radial-gradient(80vmax 80vmax at 50% 55%, rgba(255,209,102,.08), rgba(255,209,102,0) 60%),
        radial-gradient(55vmax 55vmax at 70% 10%, rgba(209,107,165,.10), rgba(17,8,36,0) 60%),
        radial-gradient(60vmax 60vmax at 10% 20%, rgba(84,107,.12) 28%, rgba(139,92,246,.08) 42%, rgba(17,8,36,0) 60%),
        radial-gradient(45vmax 45vmax at 20% 20%, rgba(209,107,165,.18), rgba(17,8,36,0) 60%),
        radial-gradient(60vmax 60vmax at 80% 30%, rgba(139,92,246,.14), rgba(17,8,36,0) 60%),
        linear-gradient(180deg, #0d0718, var(--bg));
      overflow-x:hidden;
    }
    .twinkle, .twinkle:before, .twinkle:after{
      position:fixed; inset:0; content:""; pointer-events:none; z-index:-1;
      background-repeat: repeat;
      background-image:
        radial-gradient(1px 1px at 20px 30px, rgba(255,255,255,.75) 60%, transparent),
        radial-gradient(1px 1px at 120px 80px, rgba(255,255,255,.55) 60%, transparent),
        radial-gradient(1px 1px at 220px 160px, rgba(255,255,255,.45) 60%, transparent);
      animation: twinkle 18s linear infinite;
    }
    .twinkle:before{ animation-duration: 28s; opacity:.6; filter: blur(.5px) }
    .twinkle:after{ animation-duration: 38s; opacity:.35; filter: blur(1px) }
    @keyframes twinkle{
      from{ background-position: 0 0, 50px 100px, 120px 40px }
      to  { background-position: 100px -200px, 0 -160px, -100px -80px }
    }

    /* Glass panels, buttons, inputs */
    .glass{ background: var(--glass); border: 1px solid rgba(255,255,255,.12); backdrop-filter: blur(12px); box-shadow: var(--shadow); border-radius: var(--radius) }
    .btn{
      display:inline-flex; align-items:center; gap:10px; cursor:pointer; border:1px solid rgba(255,255,255,.12);
      background: linear-gradient(180deg, rgba(255,255,255,.12), rgba(255,255,255,.06)); color:#fff;
      padding:12px 16px; border-radius: 14px; transition: transform .08s ease, box-shadow .2s ease, border-color .2s ease;
      box-shadow: var(--glow), 0 6px 18px rgba(0,0,0,.25);
    }
    .btn:hover{ transform: translateY(-1px); box-shadow: 0 10px 24px rgba(0,0,0,.35), 0 0 30px rgba(255,209,102,.18) }
    .btn.gold{ border-color: rgba(255,209,102,.35) }
    .btn.ghost{ background: transparent; border-color: rgba(255,255,255,.18) }

    .input{
      width:100%; padding:12px 14px; color:var(--text); border-radius:12px; background: rgba(255,255,255,.06);
      border:1px solid rgba(255,255,255,.14); outline:none; transition: border-color .2s ease, box-shadow .2s ease;
    }
    .input:focus{ border-color: rgba(255,209,102,.5); box-shadow: 0 0 0 4px rgba(255,209,102,.12) }

    /* Top nav */
    .nav{ display:flex; align-items:center; justify-content:space-between; padding:12px 16px; position:sticky; top:12px; z-index:10 }
    .brand h1{
      margin:0; font-weight:800; letter-spacing:.5px; font-size: clamp(18px, 3.6vw, 32px); color:#eaddff; opacity:.95;
      text-shadow: 0 0 12px rgba(209,107,165,.18), 0 8px 26px rgba(0,0,0,.25);
    }
    .brand .muted{ color:var(--muted) }
    .toplinks a{ margin-left:18px }

    /* Login hero */
    .screen{ display:none }
    .screen.active{ display:block }
    .hero{
      position:relative; margin-top:8vh; padding: 40px 18px 56px; text-align:center;
    }
    .slogan{
      font-size: clamp(18px, 3.6vw, 32px); color:#eaddff; opacity:.9;
      letter-spacing:.6px; margin-bottom: 12px;
      white-space: nowrap; overflow: hidden; border-right: 2px solid rgba(255,209,102,.7); width:0ch;
      animation: typeIn 3.2s steps(21) .8s forwards;
    }
    @keyframes typeIn{ from{ width:0ch; opacity:1 } to{ width:21ch; opacity:1 } }
    .title{ font-size: clamp(56px, 12vw, 140px); font-weight:900; line-height:.85; letter-spacing: .5px;
      color:#fff; text-shadow: 0 0 24px rgba(255,209,102,.45), 0 0 30px rgba(209,107,165,.25); cursor: default; }
    @keyframes unblur{ to{ filter: blur(0); opacity:1; } }
    .cta{ margin-top: 26px; opacity:0; animation: fadeIn .8s ease 3.6s forwards; display:flex; gap:12px; justify-content:center; }
    @keyframes fadeIn{ to{ opacity:1; } }

    /* Easter egg waveform */
    .wave{ position:absolute; top:50%; left:50%; width:60vmax; height:60vmax; transform: translate(-50%, -50%); opacity:.12; filter: blur(2px) }
    .wave .dot{ position:absolute; width:8px; height:8px; border-radius:99px; background: #ffd166; box-shadow: 0 0 16px rgba(255,209,102,.5) }

    /* Panels */
    .panels{
      margin-top:40px; display:grid; grid-template-columns: 1fr; gap:16px;
    }
    @media (min-width: 900px){
      .panels{ grid-template-columns: 1.2fr 1fr }
    }
    .panel{
      padding:16px; border-radius: var(--radius); background: var(--panel); border:1px solid rgba(255,255,255,.08); box-shadow: var(--shadow)
    }
    .panel h3{ margin:0 0 12px 0; color:#f2e8ff }

    /* Modals */
    .modal{ position: fixed; inset:0; display:none; align-items:center; justify-content:center; }
    .modal.active{ display:flex }
    .modal .sheet{ width: min(540px, 92vw); padding: 18px; background: var(--panel-solid); border: 1px solid rgba(255,255,255,.12); border-radius: 16px; box-shadow: var(--shadow) }
    .modal h3{ margin-top:0 }
    .modal .row{ display:flex; gap:12px }
    .modal .row .col{ flex:1 }

    .muted{ color: var(--muted) }
    .error{ color: var(--err) }

    /* Tabs (journal/analysis) */
    .tabs{ display:flex; gap:10px; margin: 22px 0 8px }
    .tabs .tab{ padding:10px 14px; border-radius:12px; cursor:pointer; border:1px solid rgba(255,255,255,.12); background: rgba(255,255,255,.04) }
    .tabs .tab.active{ border-color: rgba(255,209,102,.5); box-shadow: inset 0 0 0 2px rgba(255,209,102,.2) }

    /* Grids */
    .grid{ display:grid; gap:12px }
    .grid.two{ grid-template-columns: 1fr }
    @media (min-width: 920px){ .grid.two{ grid-template-columns: 1fr 1fr } }

    /* Recorder */
    .recorder{ display:flex; align-items:center; gap:12px; flex-wrap:wrap }
    .pill{
      display:inline-flex; align-items:center; gap:8px; padding:6px 10px; border-radius: 999px;
      background: rgba(255,255,255,.06); border:1px solid rgba(255,255,255,.12); font-size: 14px;
    }
    .pill .dot{ width:10px; height:10px; border-radius:99px; background: var(--err); box-shadow:0 0 10px rgba(255,107,107,.6) }
    .pill.good .dot{ background: var(--ok); box-shadow:0 0 10px rgba(88,227,163,.6) }

    /* Lists */
    .list{ list-style:none; margin:8px 0 0; padding:0 }
    .list li{ padding:10px 0; border-bottom:1px dashed rgba(255,255,255,.08) }

    /* Calendar */
    .calendar{ display:grid; grid-template-columns: repeat(7, 1fr); gap:8px; margin-top:8px }
    .day{ background: rgba(255,255,255,.05); border:1px solid rgba(255,255,255,.09); border-radius: 12px; min-height: 70px; padding: 8px }
    .day .dot{ width:7px; height:7px; border-radius:99px; background: var(--ok); display:inline-block; margin-right: 6px }

    /* Login page: set "minuet" word to Pinyon Script and bigger */
    #title-minuet{ font-family:"Pinyon Script", cursive; font-weight:400; font-size: clamp(96px, 16vw, 220px); }
  </style>
</head>
<body>
  <div class="twinkle"></div>

  <div class="wrap">
    <div class="nav glass">
      <div class="brand">
        <h1>Spend a <span class="muted">minute with</span> <span style="font-weight:900; letter-spacing:.5px; text-shadow:0 0 28px rgba(255,209,102,.45)">minuet</span></h1>
      </div>
      <div class="toplinks">
        <a href="#" id="nav-archive">archive</a>
        <a href="#" id="nav-account">my account</a>
      </div>
    </div>

    <!-- LOGIN / LANDING -->
    <section id="screen-login" class="screen active">
      <div class="hero">
        <div class="slogan">Spend a minute with</div>
        <div class="title" id="title-minuet">minuet</div>
        <div class="wave" aria-hidden="true">
          <div class="dot" style="top:40%; left:18%"></div>
          <div class="dot" style="top:46%; left:24%"></div>
          <div class="dot" style="top:52%; left:30%"></div>
          <div class="dot" style="top:48%; left:36%"></div>
          <div class="dot" style="top:42%; left:42%"></div>
          <div class="dot" style="top:46%; left:48%"></div>
          <div class="dot" style="top:51%; left:54%"></div>
          <div class="dot" style="top:47%; left:60%"></div>
          <div class="dot" style="top:45%; left:66%"></div>
          <div class="dot" style="top:50%; left:72%"></div>
          <div class="dot" style="top:55%; left:78%"></div>
        </div>

        <div class="cta">
          <button class="btn gold" id="btn-try">try today</button>
          <button class="btn ghost" id="btn-login">log in</button>
        </div>
      </div>

      <div class="panels">
        <div class="panel">
          <h3>speech → text</h3>
          <div class="recorder">
            <button class="btn" id="btn-start"><span aria-hidden="true">●</span> start</button>
            <button class="btn" id="btn-stop" disabled>stop</button>
            <button class="btn" id="btn-play" disabled>play</button>
            <button class="btn" id="btn-download" disabled>download mp3</button>
            <span class="pill" id="recState"><span class="dot"></span> idle</span>
            <span class="pill" id="recTimer">00:00</span>
            <audio id="player" style="display:none" controls></audio>
          </div>
        </div>

        <div class="panel">
          <h3>transcript</h3>
          <textarea class="input" id="transcript" rows="8" placeholder="Your transcript will appear here..."></textarea>
        </div>
      </div>
    </section>

    <!-- JOURNAL / APP -->
    <section id="screen-app" class="screen">
      <div class="tabs">
        <div class="tab active" data-tab="journal">journal</div>
        <div class="tab" data-tab="analysis">analysis</div>
        <div class="tab" data-tab="progress">progress</div>
      </div>

      <div class="panel" id="tab-journal">
        <div class="grid two">
          <div class="col">
            <h3>record entry</h3>
            <div class="recorder">
              <button class="btn" id="s-start"><span aria-hidden="true">●</span> start</button>
              <button class="btn" id="s-stop" disabled>stop</button>
              <button class="btn" id="s-play" disabled>play</button>
              <button class="btn" id="s-download" disabled>download mp3</button>
              <span class="pill" id="s-state"><span class="dot"></span> idle</span>
              <span class="pill" id="s-timer">00:00</span>
              <audio id="s-player" style="display:none" controls></audio>
            </div>
          </div>
          <div class="col">
            <h3>transcript</h3>
            <textarea class="input" id="s-text" rows="10" placeholder="Say anything that's on your mind..."></textarea>
          </div>
        </div>
      </div>

      <div class="panel" id="tab-analysis" style="display:none">
        <h3>analysis (demo)</h3>
        <p class="muted">This demo shows placeholder sentiment &amp; prosody analysis.</p>
        <ul class="list" id="analysisList">
          <li><strong>sentiment:</strong> <span class="muted">neutral</span></li>
          <li><strong>prosody:</strong> <span class="muted">balanced</span></li>
        </ul>
      </div>

      <div class="panel" id="tab-progress" style="display:none">
        <h3>recent entries</h3>
        <ul class="list" id="recentList"></ul>

        <h3 style="margin-top:18px">calendar</h3>
        <div class="calendar" id="calendar"></div>

        <div style="margin-top:16px">
          <button class="btn" id="btn-report">download today's report</button>
          <span id="reportError" class="error" style="margin-left:10px"></span>
        </div>
      </div>
    </section>
  </div>

  <!-- LOGIN MODAL -->
  <div class="modal" id="modal-login" role="dialog" aria-modal="true" aria-labelledby="loginTitle">
    <div class="sheet">
      <h3 id="loginTitle">log in</h3>
      <div class="grid two">
        <div class="col">
          <label for="in-email">email</label>
          <input class="input" id="in-email" type="email" placeholder="you@example.com">
        </div>
        <div class="col">
          <label for="in-first">first name</label>
          <input class="input" id="in-first" type="text" placeholder="Alex">
        </div>
        <div class="col">
          <label for="in-last">last name</label>
          <input class="input" id="in-last" type="text" placeholder="Kim">
        </div>
        <div class="col">
          <label for="in-pass">password</label>
          <input class="input" id="in-pass" type="password" placeholder="••••••••">
        </div>
      </div>
      <div style="display:flex; gap:10px; justify-content:flex-end; margin-top:12px">
        <button class="btn ghost" id="loginCancel">cancel</button>
        <button class="btn gold" id="loginGo">continue</button>
      </div>
    </div>
  </div>

  <script>
    // Routing / nav
    const scrLogin  = document.getElementById('screen-login');
    const scrApp    = document.getElementById('screen-app');
    const btnTry    = document.getElementById('btn-try');
    const btnLogin  = document.getElementById('btn-login');
    const modal     = document.getElementById('modal-login');
    const loginGo   = document.getElementById('loginGo');
    const loginCancel = document.getElementById('loginCancel');
    const navArchive= document.getElementById('nav-archive');
    const navAccount= document.getElementById('nav-account');

    btnTry.addEventListener('click', () => { // guest mode
      scrLogin.classList.remove('active');
      scrApp.classList.add('active');
    });
    btnLogin.addEventListener('click', () => { modal.classList.add('active'); });
    loginCancel.addEventListener('click', () => modal.classList.remove('active'));
    loginGo.addEventListener('click', () => {
      // pretend success
      modal.classList.remove('active');
      scrLogin.classList.remove('active');
      scrApp.classList.add('active');
    });
    navArchive.addEventListener('click', e => { e.preventDefault(); alert('Archive coming soon'); });
    navAccount.addEventListener('click', e => { e.preventDefault(); modal.classList.add('active'); });

    // Tab logic
    const tabs = document.querySelectorAll('.tab');
    const tabViews = {
      journal: document.getElementById('tab-journal'),
      analysis: document.getElementById('tab-analysis'),
      progress: document.getElementById('tab-progress')
    };
    tabs.forEach(t => t.addEventListener('click', () => {
      tabs.forEach(x => x.classList.remove('active'));
      t.classList.add('active');
      Object.values(tabViews).forEach(v => v.style.display='none');
      tabViews[t.dataset.tab].style.display='block';
    }));

    // Recorder helpers (both login demo + app)
    function Recorder(block) {
      const btnStart = block.querySelector('button#' + (block.id ? 's-start' : 'btn-start')) || block.querySelector('#btn-start');
      const btnStop  = block.querySelector('button#' + (block.id ? 's-stop' : 'btn-stop')) || block.querySelector('#btn-stop');
      const btnPlay  = block.querySelector('button#' + (block.id ? 's-play' : 'btn-play')) || block.querySelector('#btn-play');
      const btnDown  = block.querySelector('button#' + (block.id ? 's-download' : 'btn-download')) || block.querySelector('#btn-download');
      const timerEl  = block.querySelector('#' + (block.id ? 's-timer' : 'recTimer')) || block.querySelector('#recTimer');
      const stateEl  = block.querySelector('#' + (block.id ? 's-state' : 'recState')) || block.querySelector('#recState');
      const player   = block.querySelector('#' + (block.id ? 's-player' : 'player')) || document.getElementById('player');

      let mediaRecorder, chunks=[], startTime=0, timerId=null;

      function setState(txt, good=false){
        stateEl.classList.toggle('good', good);
        stateEl.querySelector('.dot').style.background = good ? 'var(--ok)' : 'var(--err)';
        stateEl.lastChild.nodeValue = ' ' + txt;
      }
      function fmt(sec){
        const m = Math.floor(sec/60).toString().padStart(2,'0');
        const s = Math.floor(sec%60).toString().padStart(2,'0');
        return `${m}:${s}`;
      }
      function tick(){
        const sec = (Date.now()-startTime)/1000;
        timerEl.textContent = fmt(sec);
      }

      async function start(){
        try{
          const stream = await navigator.mediaDevices.getUserMedia({ audio:true });
          mediaRecorder = new MediaRecorder(stream);
          chunks=[];
          mediaRecorder.ondataavailable = e => { if(e.data.size) chunks.push(e.data); };
          mediaRecorder.onstop = async () => {
            const blob = new Blob(chunks, { type:'audio/webm' });
            const arrayBuffer = await blob.arrayBuffer();
            // Transcode hint skipped: browsers download .webm/ogg; demo uses webm
            const url = URL.createObjectURL(new Blob([arrayBuffer], { type: 'audio/webm' }));
            player.src = url;
            btnPlay.disabled = false;
            btnDown.disabled = false;
            setState('ready', true);
          };
          mediaRecorder.start();
          startTime = Date.now();
          timerId = setInterval(tick, 250);
          setState('recording');
          btnStart.disabled = true;
          btnStop.disabled = false;
          btnPlay.disabled = true;
          btnDown.disabled = true;
        }catch(err){
          console.error(err);
          setState('mic denied');
          alert('Microphone permission is required.');
        }
      }
      function stop(){
        if(mediaRecorder && mediaRecorder.state !== 'inactive'){
          mediaRecorder.stop();
        }
        if(timerId) { clearInterval(timerId); timerId=null; }
        btnStart.disabled = false;
        btnStop.disabled = true;
      }
      function play(){ player.play(); }
      function download(){
        // For simplicity, download the webm as "recording.webm"
        const a = document.createElement('a');
        a.href = player.src; a.download = 'recording.webm';
        a.click();
      }

      btnStart && btnStart.addEventListener('click', start);
      btnStop  && btnStop.addEventListener('click', stop);
      btnPlay  && btnPlay.addEventListener('click', play);
      btnDown  && btnDown.addEventListener('click', download);
    }

    // Init both recorder blocks
    Recorder(document.querySelector('#screen-login .panel'));
    Recorder(document.getElementById('tab-journal'));

    // Transcript demo on login page (left panel)
    const tArea = document.getElementById('transcript');

    // Store entries and simple UI
    function setError(msg){ const el=document.getElementById('reportError'); el.textContent = msg || '' }

    function buildTodayReportText(){
      const last = JSON.parse(localStorage.getItem('minuet_last')||'null')||{};
      const today = new Date().toISOString().slice(0,10);
      return `Minuet — Daily Report
Date: ${today}

Entry summary:
- Transcript length: ${(tArea.value||'').length} chars
- Audio attached: ${document.getElementById('player').src ? 'Yes' : 'No'}

Sentiment (demo): neutral
Prosody (demo): balanced

Notes:
This is a demo-only report for UI testing.
`;
    }

    document.getElementById('btn-report').addEventListener('click', () => {
      try{
        const txt = buildTodayReportText();
        const blob = new Blob([txt], { type:'text/plain' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url; a.download = 'minuet_daily_report.txt';
        a.click();
      } catch(e){ setError('Could not create report.'); }
    });

    // Calendar + recent entries (demo)
    function pushLastEntry(){
      try{
        const player = document.getElementById('player');
        const text   = tArea.value.trim();
        if(!text && !player.src){ return; }
        const last = { date: new Date().toISOString().slice(0,10), text, audioUrl: player.src, moodColor: '#ffd166' };
        localStorage.setItem('minuet_last', JSON.stringify(last));
        const arr = JSON.parse(localStorage.getItem('minuet_entries')||'[]');
        arr.push(last);
        localStorage.setItem('minuet_entries', JSON.stringify(arr));
        renderCalendar(); renderRecent();
      } catch(e){ setError('Transcription failed: ' + e.message); }
    }

    function renderRecent(){
      const list=document.getElementById('recentList'); list.innerHTML='';
      const arr = JSON.parse(localStorage.getItem('minuet_entries')||'[]').slice(-6).reverse();
      if(arr.length===0){
        const li=document.createElement('li'); li.className='muted'; li.textContent='No entries yet.';
        list.appendChild(li); return;
      }
      for(const it of arr){
        const li=document.createElement('li');
        const a = document.createElement('a'); a.textContent = it.date + ' — view'; a.href = it.audioUrl || '#';
        li.appendChild(a);
        const p = document.createElement('div'); p.className='muted'; p.textContent = (it.text||'').slice(0,120) + ((it.text||'').length>120?'…':'');
        li.appendChild(p);
        list.appendChild(li);
      }
    }

    function renderCalendar(){
      const cal = document.getElementById('calendar'); cal.innerHTML='';
      const arr = JSON.parse(localStorage.getItem('minuet_entries')||'[]');
      // very rough: fill current month grid 7x4
      const now = new Date(); const y=now.getFullYear(), m=now.getMonth();
      const first = new Date(y,m,1);
      const offset = first.getDay();
      const days = new Date(y,m+1,0).getDate();
      const map = new Map(arr.map(e=>[e.date,true]));
      for(let i=0;i<28;i++){
        const dnum = i - offset + 1;
        const cell = document.createElement('div'); cell.className='day';
        if(dnum>0 && dnum<=days){
          const dateStr = new Date(y,m,dnum).toISOString().slice(0,10);
          const has = map.get(dateStr);
          cell.innerHTML = `<div>${dnum}</div>${has?'<span class="dot"></span>':''}`;
        }
        cal.appendChild(cell);
      }
    }

    // When leaving login (guest mode), push a sample entry so progress UI isn't empty
    btnTry.addEventListener('click', () => setTimeout(pushLastEntry, 800));

    // Simple auto-save when transcript changes (login panel)
    tArea.addEventListener('input', () => {
      localStorage.setItem('minuet_tmp_text', tArea.value);
    });
    (function restore(){
      const tmp = localStorage.getItem('minuet_tmp_text');
      if(tmp) tArea.value = tmp;
    })();
  </script>
</body>
</html>
