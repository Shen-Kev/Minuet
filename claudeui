<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Minuet - Spend a Minute With Yourself</title>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
    
    :root {
      --bg-dark: #0a0615;
      --bg-secondary: #1a1428;
      --panel: #241b35;
      --text-primary: #f5e6ff;
      --text-secondary: #b8a5c7;
      --accent-yellow: #ffd700;
      --accent-purple: #9b59b6;
      --accent-pink: #ff6ba6;
      --accent-blue: #6ea8fe;
      --glow-purple: rgba(155, 89, 182, 0.6);
      --glow-yellow: rgba(255, 215, 0, 0.8);
      --glow-pink: rgba(255, 107, 166, 0.5);
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    html, body {
      height: 100%;
      background: var(--bg-dark);
      color: var(--text-primary);
      font-family: 'Inter', system-ui, -apple-system, sans-serif;
      overflow-x: hidden;
    }

    /* Animated Background */
    .background-container {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 0;
      background: linear-gradient(135deg, #0a0615 0%, #1a0b2e 50%, #2a1548 100%);
      overflow: hidden;
    }

    .twinkling-lights {
      position: absolute;
      width: 100%;
      height: 100%;
      background-image: 
        radial-gradient(2px 2px at 20% 30%, rgba(255, 215, 0, 0.3), transparent),
        radial-gradient(2px 2px at 60% 70%, rgba(155, 89, 182, 0.2), transparent),
        radial-gradient(1px 1px at 90% 10%, rgba(255, 107, 166, 0.3), transparent),
        radial-gradient(1px 1px at 15% 80%, rgba(110, 168, 254, 0.2), transparent);
      background-size: 200% 200%;
      animation: twinkle 15s ease-in-out infinite;
    }

    @keyframes twinkle {
      0%, 100% { transform: translate(0, 0); opacity: 0.5; }
      25% { transform: translate(-50px, -50px); opacity: 0.8; }
      50% { transform: translate(50px, -30px); opacity: 0.6; }
      75% { transform: translate(-30px, 50px); opacity: 0.9; }
    }

    .aurora {
      position: absolute;
      width: 200%;
      height: 200%;
      background: radial-gradient(ellipse at bottom, transparent, rgba(155, 89, 182, 0.1) 40%, transparent 70%);
      animation: aurora 20s linear infinite;
    }

    @keyframes aurora {
      0% { transform: rotate(0deg) translateY(0); }
      100% { transform: rotate(360deg) translateY(-50px); }
    }

    /* Login Screen */
    .login-container {
      position: relative;
      z-index: 10;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
      animation: fadeIn 1s ease-out;
    }

    .login-content {
      text-align: center;
      max-width: 500px;
      padding: 40px;
    }

    .subtitle {
      font-size: 24px;
      font-weight: 300;
      color: var(--text-secondary);
      margin-bottom: 20px;
      opacity: 0;
      animation: typeIn 2s ease-out 0.5s forwards;
    }

    @keyframes typeIn {
      0% { opacity: 0; transform: translateY(-20px); }
      100% { opacity: 1; transform: translateY(0); }
    }

    .title {
      font-size: 72px;
      font-weight: 700;
      background: linear-gradient(135deg, var(--accent-yellow), var(--accent-pink));
      -webkit-background-clip: text;
      background-clip: text;
      -webkit-text-fill-color: transparent;
      margin-bottom: 60px;
      opacity: 0;
      animation: blurIn 1.5s ease-out 1.5s forwards;
      cursor: pointer;
      position: relative;
      transition: all 0.3s ease;
    }

    .title:hover::after {
      content: '';
      position: absolute;
      bottom: -10px;
      left: 50%;
      transform: translateX(-50%);
      width: 100%;
      height: 3px;
      background: linear-gradient(90deg, transparent, var(--accent-yellow), transparent);
      animation: waveform 1s ease-in-out infinite;
    }

    @keyframes waveform {
      0%, 100% { transform: translateX(-50%) scaleY(1); }
      50% { transform: translateX(-50%) scaleY(3); }
    }

    @keyframes blurIn {
      0% { opacity: 0; filter: blur(20px); }
      100% { opacity: 1; filter: blur(0); }
    }

    @keyframes fadeIn {
      0% { opacity: 0; }
      100% { opacity: 1; }
    }

    .login-buttons {
      display: flex;
      gap: 30px;
      justify-content: center;
      opacity: 0;
      animation: fadeIn 1s ease-out 2.5s forwards;
    }

    .btn-login {
      padding: 15px 40px;
      font-size: 18px;
      font-weight: 500;
      border: 2px solid var(--accent-purple);
      background: rgba(155, 89, 182, 0.1);
      color: var(--text-primary);
      border-radius: 50px;
      cursor: pointer;
      transition: all 0.3s ease;
      text-decoration: none;
      display: inline-block;
      position: relative;
      overflow: hidden;
    }

    .btn-login::before {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      width: 0;
      height: 0;
      border-radius: 50%;
      background: var(--glow-yellow);
      transition: width 0.6s, height 0.6s;
      transform: translate(-50%, -50%);
    }

    .btn-login:hover {
      background: transparent;
      color: var(--accent-yellow);
      border-color: transparent;
      text-shadow: 0 0 20px var(--glow-yellow);
      box-shadow: 0 0 30px var(--glow-purple);
    }

    .btn-login:hover::before {
      width: 300px;
      height: 300px;
      opacity: 0;
    }

    /* Modal */
    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(10, 6, 21, 0.9);
      backdrop-filter: blur(10px);
      z-index: 1000;
      animation: fadeIn 0.3s ease-out;
    }

    .modal.active {
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .modal-content {
      background: linear-gradient(135deg, rgba(36, 27, 53, 0.9), rgba(26, 20, 40, 0.9));
      border: 1px solid rgba(155, 89, 182, 0.3);
      border-radius: 20px;
      padding: 40px;
      max-width: 450px;
      width: 90%;
      box-shadow: 0 0 50px var(--glow-purple);
      animation: slideUp 0.3s ease-out;
    }

    @keyframes slideUp {
      0% { transform: translateY(50px); opacity: 0; }
      100% { transform: translateY(0); opacity: 1; }
    }

    .modal h2 {
      color: var(--accent-yellow);
      margin-bottom: 30px;
      text-align: center;
      text-shadow: 0 0 20px var(--glow-yellow);
    }

    .form-group {
      margin-bottom: 20px;
    }

    .form-group label {
      display: block;
      color: var(--text-secondary);
      margin-bottom: 8px;
      font-size: 14px;
    }

    .form-group input {
      width: 100%;
      padding: 12px 15px;
      background: rgba(10, 6, 21, 0.6);
      border: 1px solid rgba(155, 89, 182, 0.3);
      border-radius: 10px;
      color: var(--text-primary);
      font-size: 16px;
      transition: all 0.3s ease;
    }

    .form-group input:focus {
      outline: none;
      border-color: var(--accent-yellow);
      box-shadow: 0 0 20px rgba(255, 215, 0, 0.3);
    }

    .modal-buttons {
      display: flex;
      gap: 20px;
      margin-top: 30px;
    }

    .btn-submit, .btn-cancel {
      flex: 1;
      padding: 12px 20px;
      border-radius: 25px;
      border: none;
      font-size: 16px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .btn-submit {
      background: linear-gradient(135deg, var(--accent-purple), var(--accent-pink));
      color: white;
    }

    .btn-submit:hover {
      box-shadow: 0 0 30px var(--glow-purple);
      transform: translateY(-2px);
    }

    .btn-cancel {
      background: rgba(255, 255, 255, 0.1);
      color: var(--text-secondary);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .btn-cancel:hover {
      background: rgba(255, 255, 255, 0.2);
    }

    /* Main Application */
    .app-container {
      display: none;
      position: relative;
      z-index: 10;
      min-height: 100vh;
      padding: 20px;
    }

    .app-container.active {
      display: block;
    }

    /* Header */
    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 20px 40px;
      background: rgba(36, 27, 53, 0.5);
      backdrop-filter: blur(10px);
      border-radius: 20px;
      margin-bottom: 30px;
      border: 1px solid rgba(155, 89, 182, 0.2);
    }

    .welcome-text {
      font-size: 24px;
      font-weight: 300;
      background: linear-gradient(135deg, var(--accent-yellow), var(--accent-pink));
      -webkit-background-clip: text;
      background-clip: text;
      -webkit-text-fill-color: transparent;
    }

    .nav-links {
      display: flex;
      gap: 30px;
    }

    .nav-link {
      color: var(--text-secondary);
      text-decoration: none;
      font-weight: 500;
      transition: all 0.3s ease;
      position: relative;
    }

    .nav-link:hover {
      color: var(--accent-yellow);
      text-shadow: 0 0 15px var(--glow-yellow);
    }

    /* Main Content Grid */
    .content-grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 30px;
      max-width: 1400px;
      margin: 0 auto;
    }

    @media (max-width: 968px) {
      .content-grid {
        grid-template-columns: 1fr;
      }
    }

    /* Recording Panel */
    .recording-panel {
      background: linear-gradient(135deg, rgba(36, 27, 53, 0.8), rgba(26, 20, 40, 0.8));
      border-radius: 20px;
      padding: 30px;
      border: 1px solid rgba(255, 215, 0, 0.3);
      box-shadow: 0 0 30px rgba(255, 215, 0, 0.1);
    }

    .panel-title {
      font-size: 20px;
      margin-bottom: 20px;
      color: var(--accent-yellow);
      text-shadow: 0 0 15px var(--glow-yellow);
    }

    .recording-controls {
      display: flex;
      gap: 15px;
      margin-bottom: 20px;
      flex-wrap: wrap;
    }

    .rec-btn {
      padding: 12px 24px;
      border-radius: 25px;
      border: none;
      font-size: 16px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.3s ease;
      display: inline-flex;
      align-items: center;
      gap: 8px;
    }

    .rec-btn.primary {
      background: linear-gradient(135deg, var(--accent-purple), var(--accent-pink));
      color: white;
    }

    .rec-btn.primary:hover {
      box-shadow: 0 0 25px var(--glow-purple);
      transform: translateY(-2px);
    }

    .rec-btn.danger {
      background: linear-gradient(135deg, #ff6ba6, #ff4757);
      color: white;
    }

    .rec-btn.danger:hover {
      box-shadow: 0 0 25px var(--glow-pink);
      transform: translateY(-2px);
    }

    .rec-btn.secondary {
      background: rgba(110, 168, 254, 0.2);
      color: var(--accent-blue);
      border: 1px solid var(--accent-blue);
    }

    .rec-btn.secondary:hover {
      background: rgba(110, 168, 254, 0.3);
      box-shadow: 0 0 20px rgba(110, 168, 254, 0.5);
    }

    .rec-btn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
      transform: none !important;
    }

    .audio-player {
      width: 100%;
      margin: 20px 0;
      border-radius: 10px;
      background: rgba(10, 6, 21, 0.6);
      padding: 10px;
    }

    .status-indicator {
      display: inline-flex;
      align-items: center;
      gap: 10px;
      padding: 8px 16px;
      background: rgba(10, 6, 21, 0.6);
      border-radius: 20px;
      border: 1px solid rgba(155, 89, 182, 0.3);
      color: var(--text-secondary);
      margin-top: 15px;
    }

    .status-indicator .status {
      color: var(--accent-yellow);
      font-weight: 600;
    }

    /* Recent Entries */
    .recent-entries {
      margin-top: 30px;
    }

    .entry-list {
      display: flex;
      flex-direction: column;
      gap: 15px;
    }

    .entry-item {
      background: rgba(10, 6, 21, 0.4);
      padding: 15px;
      border-radius: 15px;
      border: 1px solid rgba(155, 89, 182, 0.2);
      transition: all 0.3s ease;
      cursor: pointer;
    }

    .entry-item:hover {
      border-color: var(--accent-yellow);
      box-shadow: 0 0 20px rgba(255, 215, 0, 0.2);
      transform: translateX(5px);
    }

    .entry-date {
      color: var(--accent-yellow);
      font-size: 14px;
      margin-bottom: 5px;
    }

    .entry-preview {
      color: var(--text-secondary);
      font-size: 14px;
      line-height: 1.4;
    }

    /* Daily Report Ready */
    .daily-report-ready {
      margin-top: 30px;
      padding: 20px;
      background: linear-gradient(135deg, rgba(255, 215, 0, 0.1), rgba(155, 89, 182, 0.1));
      border-radius: 15px;
      border: 1px solid rgba(255, 215, 0, 0.3);
      text-align: center;
      animation: pulse 2s ease-in-out infinite;
    }

    @keyframes pulse {
      0%, 100% { box-shadow: 0 0 20px rgba(255, 215, 0, 0.3); }
      50% { box-shadow: 0 0 40px rgba(255, 215, 0, 0.5); }
    }

    .daily-report-ready h3 {
      color: var(--accent-yellow);
      margin-bottom: 10px;
    }

    .btn-view-report {
      padding: 10px 30px;
      background: linear-gradient(135deg, var(--accent-yellow), var(--accent-pink));
      color: var(--bg-dark);
      border: none;
      border-radius: 25px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .btn-view-report:hover {
      box-shadow: 0 0 30px var(--glow-yellow);
      transform: translateY(-2px);
    }

    /* Progress Calendar */
    .calendar-panel {
      background: linear-gradient(135deg, rgba(36, 27, 53, 0.8), rgba(26, 20, 40, 0.8));
      border-radius: 20px;
      padding: 30px;
      border: 1px solid rgba(155, 89, 182, 0.3);
      box-shadow: 0 0 30px rgba(155, 89, 182, 0.1);
    }

    .calendar-grid {
      display: grid;
      grid-template-columns: repeat(7, 1fr);
      gap: 10px;
      margin-top: 20px;
    }

    .calendar-day {
      aspect-ratio: 1;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 10px;
      background: rgba(10, 6, 21, 0.4);
      border: 1px solid rgba(155, 89, 182, 0.2);
      font-size: 14px;
      transition: all 0.3s ease;
      cursor: pointer;
    }

    .calendar-day:hover {
      transform: scale(1.1);
      box-shadow: 0 0 15px rgba(155, 89, 182, 0.5);
    }

    .calendar-day.filled {
      border: none;
    }

    .calendar-day.mood-happy {
      background: linear-gradient(135deg, #ffd700, #ffed4e);
      color: var(--bg-dark);
      box-shadow: 0 0 15px rgba(255, 215, 0, 0.5);
    }

    .calendar-day.mood-calm {
      background: linear-gradient(135deg, #6ea8fe, #89c2ff);
      color: white;
      box-shadow: 0 0 15px rgba(110, 168, 254, 0.5);
    }

    .calendar-day.mood-energetic {
      background: linear-gradient(135deg, #ff6ba6, #ff8fab);
      color: white;
      box-shadow: 0 0 15px rgba(255, 107, 166, 0.5);
    }

    .calendar-day.mood-thoughtful {
      background: linear-gradient(135deg, #9b59b6, #b07cc6);
      color: white;
      box-shadow: 0 0 15px rgba(155, 89, 182, 0.5);
    }

    /* Transcript Display */
    .transcript-box {
      background: rgba(10, 6, 21, 0.6);
      border: 1px solid rgba(155, 89, 182, 0.3);
      border-radius: 15px;
      padding: 20px;
      margin-top: 20px;
      min-height: 100px;
      max-height: 300px;
      overflow-y: auto;
      white-space: pre-wrap;
      font-family: 'Inter', monospace;
      color: var(--text-secondary);
    }

    .transcript-box::-webkit-scrollbar {
      width: 8px;
    }

    .transcript-box::-webkit-scrollbar-track {
      background: rgba(10, 6, 21, 0.4);
      border-radius: 10px;
    }

    .transcript-box::-webkit-scrollbar-thumb {
      background: var(--accent-purple);
      border-radius: 10px;
    }

    /* Report Page */
    .report-container {
      display: none;
      position: relative;
      z-index: 10;
      padding: 40px;
      max-width: 1200px;
      margin: 0 auto;
    }

    .report-container.active {
      display: block;
    }

    .report-header {
      text-align: center;
      margin-bottom: 40px;
    }

    .report-date {
      font-size: 32px;
      color: var(--accent-yellow);
      text-shadow: 0 0 20px var(--glow-yellow);
      margin-bottom: 10px;
    }

    .report-grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 30px;
    }

    .report-section {
      background: linear-gradient(135deg, rgba(36, 27, 53, 0.8), rgba(26, 20, 40, 0.8));
      border-radius: 20px;
      padding: 30px;
      border: 1px solid rgba(155, 89, 182, 0.3);
    }

    .placeholder {
      background: rgba(10, 6, 21, 0.4);
      border: 2px dashed rgba(155, 89, 182, 0.3);
      border-radius: 15px;
      padding: 40px;
      text-align: center;
      color: var(--text-secondary);
      font-style: italic;
    }

    /* Footer */
    .footer {
      position: fixed;
      bottom: 20px;
      left: 50%;
      transform: translateX(-50%);
      z-index: 10;
    }

    .footer-link {
      color: var(--text-secondary);
      text-decoration: none;
      padding: 10px 20px;
      background: rgba(36, 27, 53, 0.8);
      border-radius: 20px;
      transition: all 0.3s ease;
      display: inline-block;
    }

    .footer-link:hover {
      color: var(--accent-yellow);
      background: rgba(36, 27, 53, 1);
      box-shadow: 0 0 20px rgba(255, 215, 0, 0.3);
    }

    /* Loading Animation */
    .loading {
      display: inline-block;
      width: 20px;
      height: 20px;
      border: 3px solid rgba(255, 215, 0, 0.3);
      border-top-color: var(--accent-yellow);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      to { transform: rotate(360deg); }
    }

    /* Upload Progress */
    .upload-progress {
      margin-top: 20px;
    }

    .progress-bar {
      height: 6px;
      background: rgba(10, 6, 21, 0.6);
      border-radius: 3px;
      overflow: hidden;
      margin-bottom: 10px;
    }

    .progress-fill {
      height: 100%;
      background: linear-gradient(90deg, var(--accent-yellow), var(--accent-pink));
      border-radius: 3px;
      width: 0%;
      transition: width 0.3s ease;
      box-shadow: 0 0 10px var(--glow-yellow);
    }

    .progress-text {
      font-size: 12px;
      color: var(--text-secondary);
    }
  </style>
</head>
<body>
  <!-- Background Effects -->
  <div class="background-container">
    <div class="twinkling-lights"></div>
    <div class="aurora"></div>
  </div>

  <!-- Login Screen -->
  <div class="login-container" id="loginScreen">
    <div class="login-content">
      <div class="subtitle">spend a minute with</div>
      <h1 class="title" id="mainTitle">minuet</h1>
      <div class="login-buttons">
        <button class="btn-login" id="tryBtn">try today</button>
        <button class="btn-login" id="loginBtn">log in</button>
      </div>
    </div>
  </div>

  <!-- Login Modal -->
  <div class="modal" id="loginModal">
    <div class="modal-content">
      <h2>Welcome Back</h2>
      <form id="loginForm">
        <div class="form-group">
          <label for="email">Email</label>
          <input type="email" id="email" required>
        </div>
        <div class="form-group">
          <label for="firstName">First Name</label>
          <input type="text" id="firstName" required>
        </div>
        <div class="form-group">
          <label for="lastName">Last Name</label>
          <input type="text" id="lastName" required>
        </div>
        <div class="form-group">
          <label for="password">Password</label>
          <input type="password" id="password" required>
        </div>
        <div class="modal-buttons">
          <button type="submit" class="btn-submit">Sign In</button>
          <button type="button" class="btn-cancel" id="cancelLogin">Cancel</button>
        </div>
      </form>
    </div>
  </div>

  <!-- Main Application -->
  <div class="app-container" id="appScreen">
    <header class="header">
      <div class="welcome-text">Welcome to your minuet, <span id="userName">Guest</span></div>
      <nav class="nav-links">
        <a href="#" class="nav-link" id="archiveLink">archive</a>
        <a href="#" class="nav-link" id="accountLink">my account</a>
      </nav>
    </header>

    <div class="content-grid">
      <!-- Left Column -->
      <div>
        <!-- Recording Panel -->
        <div class="recording-panel">
          <h2 class="panel-title">Record Your Moment</h2>
          <div class="recording-controls">
            <button class="rec-btn primary" id="recBtn">● Start Recording</button>
            <button class="rec-btn danger" id="stopBtn" disabled>■ Stop</button>
            <button class="rec-btn secondary" id="playbackBtn" disabled>▶ Playback</button>
            <button class="rec-btn secondary" id="rerecordBtn" disabled>↻ Re-record</button>
            <button class="rec-btn primary" id="submitBtn" disabled>✓ Submit</button>
          </div>
          <audio id="player" controls class="audio-player" style="display: none;"></audio>
          <div class="status-indicator">
            Status: <span class="status" id="status">Ready</span>
          </div>
          
          <!-- Upload Progress -->
          <div class="upload-progress" id="uploadProgress" style="display: none;">
            <div class="progress-bar">
              <div class="progress-fill" id="progressBar"></div>
            </div>
            <div class="progress-text" id="progressText"></div>
          </div>

          <!-- Transcript Display -->
          <h3 class="panel-title" style="margin-top: 30px;">Transcript</h3>
          <div class="transcript-box" id="transcript">(Your transcript will appear here after recording)</div>
          
          <div class="recording-controls" style="margin-top: 15px;">
            <button class="rec-btn secondary" id="copyBtn">📋 Copy Transcript</button>
            <button class="rec-btn secondary" id="downloadBtn">⬇ Download</button>
          </div>
        </div>

        <!-- Recent Entries -->
        <div class="recent-entries">
          <h3 class="panel-title">Recent Entries</h3>
          <div class="entry-list" id="entryList">
            <div class="entry-item">
              <div class="entry-date">September 12, 2025</div>
              <div class="entry-preview">Feeling grateful today for the small moments...</div>
            </div>
            <div class="entry-item">
              <div class="entry-date">September 11, 2025</div>
              <div class="entry-preview">Had a productive day, accomplished my goals...</div>
            </div>
            <div class="entry-item">
              <div class="entry-date">September 10, 2025</div>
              <div class="entry-preview">Reflected on personal growth and future plans...</div>
            </div>
          </div>
        </div>

        <!-- Daily Report Ready -->
        <div class="daily-report-ready" id="dailyReportReady" style="display: none;">
          <h3>Your Daily Report is Ready!</h3>
          <p>Discover your emotional journey from today</p>
          <button class="btn-view-report" id="viewReportBtn">View Report</button>
        </div>
      </div>

      <!-- Right Column -->
      <div>
        <!-- Progress Calendar -->
        <div class="calendar-panel">
          <h2 class="panel-title">Your Progress Calendar</h2>
          <div class="calendar-grid" id="calendarGrid">
            <!-- Calendar days will be generated here -->
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Report Page -->
  <div class="report-container" id="reportScreen">
    <div class="report-header">
      <h1 class="report-date" id="reportDate">September 13, 2025 Report</h1>
      <button class="rec-btn secondary" onclick="backToHome()">← Back to Home</button>
    </div>

    <div class="report-grid">
      <div class="report-section">
        <h3 class="panel-title">Recording & Transcript</h3>
        <button class="rec-btn secondary" id="replayRecording">▶ Replay Recording</button>
        <button class="rec-btn secondary" id="openTranscript" style="margin-left: 10px;">📄 Open Transcript</button>
        
        <div class="report-section" style="margin-top: 20px;">
          <h3 class="panel-title">Aura Color</h3>
          <div class="placeholder">
            <p>🎨 Aura Color Analysis</p>
            <p>Coming Soon...</p>
          </div>
        </div>
      </div>

      <div class="report-section">
        <h3 class="panel-title">Analysis</h3>
        <div class="placeholder">
          <p>📊 Emotional Analysis</p>
          <p>Feature in Development...</p>
        </div>
        
        <div class="report-section" style="margin-top: 20px;">
          <h3 class="panel-title">Generated Song</h3>
          <div class="placeholder">
            <p>🎵 Your Personalized Melody</p>
            <p>Coming Soon...</p>
          </div>
        </div>

        <div style="margin-top: 20px;">
          <button class="rec-btn primary" id="downloadReportBtn" style="width: 100%;">
            ⬇ Download Your Report
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Account Modal -->
  <div class="modal" id="accountModal">
    <div class="modal-content">
      <h2>My Account</h2>
      <div class="form-group">
        <label>Email</label>
        <input type="text" id="accountEmail" readonly>
      </div>
      <div class="form-group">
        <label>First Name</label>
        <input type="text" id="accountFirstName" readonly>
      </div>
      <div class="form-group">
        <label>Last Name</label>
        <input type="text" id="accountLastName" readonly>
      </div>
      <div class="modal-buttons">
        <button class="btn-submit" id="logoutBtn">Log Out</button>
        <button class="btn-cancel" id="closeAccountBtn">Close</button>
      </div>
    </div>
  </div>

  <!-- Archive Modal -->
  <div class="modal" id="archiveModal">
    <div class="modal-content" style="max-width: 800px;">
      <h2>Your Archive</h2>
      <div id="archiveContent">
        <p style="color: var(--text-secondary); text-align: center; padding: 20px;">
          You must be logged in to view your archive history.
        </p>
      </div>
      <div class="modal-buttons">
        <button class="btn-cancel" id="closeArchiveBtn" style="width: 100%;">Close</button>
      </div>
    </div>
  </div>

  <!-- About Us Modal -->
  <div class="modal" id="aboutModal">
    <div class="modal-content">
      <h2>About Minuet</h2>
      <p style="color: var(--text-secondary); line-height: 1.6; margin: 20px 0;">
        Minuet is a mental wellness platform designed to help you spend meaningful moments with yourself. 
        Through daily voice recordings and AI-powered insights, we help you track your emotional journey 
        and discover patterns in your mental well-being.
      </p>
      <p style="color: var(--text-secondary); line-height: 1.6;">
        Created with love by our dedicated team committed to making mental health support accessible to everyone.
      </p>
      <div class="modal-buttons">
        <button class="btn-cancel" id="closeAboutBtn" style="width: 100%;">Close</button>
      </div>
    </div>
  </div>

  <!-- Download Report Modal -->
  <div class="modal" id="downloadModal">
    <div class="modal-content">
      <h2>Download Options</h2>
      <div style="display: flex; flex-direction: column; gap: 15px; margin: 30px 0;">
        <button class="btn-submit" id="downloadTodayBtn">
          📄 Download Today's Report
        </button>
        <button class="btn-submit" id="downloadOverallBtn" style="background: linear-gradient(135deg, var(--accent-yellow), var(--accent-pink));">
          📊 Download Overall Review
        </button>
      </div>
      <div class="modal-buttons">
        <button class="btn-cancel" id="closeDownloadBtn" style="width: 100%;">Cancel</button>
      </div>
    </div>
  </div>

  <!-- Footer -->
  <div class="footer">
    <a href="#" class="footer-link" id="aboutUsBtn">about us</a>
  </div>

  <script>
    // ===========================
    // State Management
    // ===========================
    let currentUser = null;
    let mediaRecorder = null;
    let chunks = [];
    let currentBlob = null;
    let recordingStart = 0;
    let lastResponse = null;
    let isLoggedIn = false;

    // ===========================
    // DOM Elements
    // ===========================
    const $ = (s) => document.querySelector(s);
    const loginScreen = $('#loginScreen');
    const appScreen = $('#appScreen');
    const reportScreen = $('#reportScreen');
    const loginModal = $('#loginModal');
    const accountModal = $('#accountModal');
    const archiveModal = $('#archiveModal');
    const aboutModal = $('#aboutModal');
    const downloadModal = $('#downloadModal');
    
    // Buttons
    const tryBtn = $('#tryBtn');
    const loginBtn = $('#loginBtn');
    const cancelLoginBtn = $('#cancelLogin');
    const recBtn = $('#recBtn');
    const stopBtn = $('#stopBtn');
    const playbackBtn = $('#playbackBtn');
    const rerecordBtn = $('#rerecordBtn');
    const submitBtn = $('#submitBtn');
    const copyBtn = $('#copyBtn');
    const downloadBtn = $('#downloadBtn');
    const viewReportBtn = $('#viewReportBtn');
    const downloadReportBtn = $('#downloadReportBtn');
    
    // Form elements
    const loginForm = $('#loginForm');
    const emailInput = $('#email');
    const firstNameInput = $('#firstName');
    const lastNameInput = $('#lastName');
    const passwordInput = $('#password');
    
    // Display elements
    const userName = $('#userName');
    const statusEl = $('#status');
    const transcriptEl = $('#transcript');
    const player = $('#player');
    const progressBar = $('#progressBar');
    const progressText = $('#progressText');
    const uploadProgress = $('#uploadProgress');
    const calendarGrid = $('#calendarGrid');
    const dailyReportReady = $('#dailyReportReady');

    // ===========================
    // Backend Configuration
    // ===========================
    const BACKEND_URL = localStorage.getItem('stt_backend_url') || 'http://localhost:8000/transcribe';

    // ===========================
    // Utility Functions
    // ===========================
    function setStatus(text) {
      statusEl.textContent = text;
    }

    function showScreen(screen) {
      loginScreen.style.display = 'none';
      appScreen.classList.remove('active');
      reportScreen.classList.remove('active');
      
      if (screen === 'login') {
        loginScreen.style.display = 'flex';
      } else if (screen === 'app') {
        appScreen.classList.add('active');
      } else if (screen === 'report') {
        reportScreen.classList.add('active');
      }
    }

    function closeModal(modal) {
      modal.classList.remove('active');
    }

    function openModal(modal) {
      modal.classList.add('active');
    }

    function prettyBytes(n) {
      if (!Number.isFinite(n)) return "";
      const units = ["B", "KB", "MB", "GB"];
      let i = 0, v = n;
      while (v >= 1024 && i < units.length - 1) { 
        v /= 1024; 
        i++; 
      }
      return v.toFixed(i ? 1 : 0) + " " + units[i];
    }

    // ===========================
    // Calendar Generation
    // ===========================
    function generateCalendar() {
      const daysInMonth = 30;
      const moods = ['', '', 'mood-happy', 'mood-calm', '', 'mood-energetic', 'mood-thoughtful', '', 'mood-happy', '', '', 'mood-calm', 'mood-energetic'];
      
      calendarGrid.innerHTML = '';
      
      for (let i = 1; i <= daysInMonth; i++) {
        const day = document.createElement('div');
        day.className = 'calendar-day';
        if (moods[i-1]) {
          day.classList.add('filled', moods[i-1]);
        }
        day.textContent = i;
        calendarGrid.appendChild(day);
      }
    }

    // ===========================
    // Recording Functions
    // ===========================
    async function startRecording() {
      setStatus('Starting recording...');
      transcriptEl.textContent = '(Recording in progress...)';
      chunks = [];
      currentBlob = null;

      try {
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        
        let mime = "audio/webm";
        if (!MediaRecorder.isTypeSupported(mime)) {
          if (MediaRecorder.isTypeSupported("audio/ogg")) mime = "audio/ogg";
          else if (MediaRecorder.isTypeSupported("audio/mp4")) mime = "audio/mp4";
          else mime = "";
        }

        mediaRecorder = new MediaRecorder(stream, mime ? { mimeType: mime } : undefined);
        
        recordingStart = Date.now();
        mediaRecorder.ondataavailable = (e) => {
          if (e.data && e.data.size > 0) chunks.push(e.data);
        };
        
        mediaRecorder.onstop = onStopRecording;
        mediaRecorder.start();
        
        setStatus('Recording...');
        recBtn.disabled = true;
        stopBtn.disabled = false;
        playbackBtn.disabled = true;
        rerecordBtn.disabled = true;
        submitBtn.disabled = true;
      } catch (e) {
        setStatus('Error: ' + e.message);
        console.error('Recording error:', e);
      }
    }

    async function stopRecording() {
      if (!mediaRecorder) return;
      mediaRecorder.stop();
      stopBtn.disabled = true;
      setStatus('Processing audio...');
    }

    async function onStopRecording() {
      try {
        currentBlob = new Blob(chunks, { type: mediaRecorder.mimeType || "audio/webm" });
        const url = URL.createObjectURL(currentBlob);
        player.src = url;
        player.style.display = 'block';
        
        setStatus('Recording complete');
        recBtn.disabled = false;
        playbackBtn.disabled = false;
        rerecordBtn.disabled = false;
        submitBtn.disabled = false;
        
        // Stop all tracks
        mediaRecorder.stream.getTracks().forEach(t => t.stop());
        mediaRecorder = null;
        
        // Auto-transcribe
        await transcribeBlob(currentBlob);
      } catch (e) {
        setStatus('Error: ' + e.message);
        console.error('Stop recording error:', e);
      }
    }

    // ===========================
    // Transcription
    // ===========================
    function uploadWithProgress(url, blob) {
      return new Promise((resolve, reject) => {
        const fd = new FormData();
        fd.append("audio", new File([blob], "recording.webm", { type: blob.type || "audio/webm" }));

        const xhr = new XMLHttpRequest();
        xhr.open("POST", url);
        
        xhr.upload.onprogress = (e) => {
          if (e.lengthComputable) {
            const pct = Math.round((e.loaded / e.total) * 100);
            progressBar.style.width = pct + '%';
            progressText.textContent = `${prettyBytes(e.loaded)} / ${prettyBytes(e.total)}`;
          }
        };
        
        xhr.onload = () => {
          if (xhr.status >= 200 && xhr.status < 300) {
            try { 
              resolve(JSON.parse(xhr.responseText)); 
            } catch { 
              resolve({ raw: xhr.responseText }); 
            }
          } else {
            reject(new Error(xhr.responseText || `HTTP ${xhr.status}`));
          }
        };
        
        xhr.onerror = () => reject(new Error("Network error"));
        xhr.send(fd);
      });
    }

    async function transcribeBlob(blob) {
      setStatus('Transcribing...');
      uploadProgress.style.display = 'block';
      
      try {
        const json = await uploadWithProgress(BACKEND_URL, blob);
        lastResponse = json;
        const text = (json && json.text) ? json.text.trim() : "";
        transcriptEl.textContent = text || "(No speech detected)";
        setStatus('Transcription complete');
        
        // Show daily report ready after successful transcription
        setTimeout(() => {
          dailyReportReady.style.display = 'block';
        }, 1000);
      } catch (e) {
        setStatus('Transcription failed');
        transcriptEl.textContent = 'Error: ' + e.message;
        console.error('Transcription error:', e);
      } finally {
        setTimeout(() => {
          uploadProgress.style.display = 'none';
          progressBar.style.width = '0%';
        }, 1000);
      }
    }

    // ===========================
    // Event Listeners
    // ===========================
    
    // Login Screen
    tryBtn.addEventListener('click', () => {
      showScreen('app');
      userName.textContent = 'Guest';
      isLoggedIn = false;
    });

    loginBtn.addEventListener('click', () => {
      openModal(loginModal);
    });

    cancelLoginBtn.addEventListener('click', () => {
      closeModal(loginModal);
    });

    loginForm.addEventListener('submit', (e) => {
      e.preventDefault();
      currentUser = {
        email: emailInput.value,
        firstName: firstNameInput.value,
        lastName: lastNameInput.value
      };
      userName.textContent = currentUser.firstName;
      isLoggedIn = true;
      closeModal(loginModal);
      showScreen('app');
      
      // Store user data
      localStorage.setItem('minuet_user', JSON.stringify(currentUser));
    });

    // Recording Controls
    recBtn.addEventListener('click', startRecording);
    stopBtn.addEventListener('click', stopRecording);
    
    playbackBtn.addEventListener('click', () => {
      if (player.src) {
        player.play();
      }
    });

    rerecordBtn.addEventListener('click', () => {
      player.src = '';
      player.style.display = 'none';
      transcriptEl.textContent = '(Your transcript will appear here after recording)';
      setStatus('Ready');
      dailyReportReady.style.display = 'none';
      startRecording();
    });

    submitBtn.addEventListener('click', () => {
      if (currentBlob) {
        setStatus('Entry submitted successfully!');
        setTimeout(() => {
          // Add to recent entries
          const entryList = $('#entryList');
          const newEntry = document.createElement('div');
          newEntry.className = 'entry-item';
          newEntry.innerHTML = `
            <div class="entry-date">September 13, 2025 - Just now</div>
            <div class="entry-preview">${transcriptEl.textContent.substring(0, 50)}...</div>
          `;
          entryList.insertBefore(newEntry, entryList.firstChild);
          
          // Reset
          player.src = '';
          player.style.display = 'none';
          transcriptEl.textContent = '(Your transcript will appear here after recording)';
          setStatus('Ready');
          playbackBtn.disabled = true;
          rerecordBtn.disabled = true;
          submitBtn.disabled = true;
        }, 1000);
      }
    });

    copyBtn.addEventListener('click', async () => {
      try {
        await navigator.clipboard.writeText(transcriptEl.textContent || "");
        setStatus('Transcript copied!');
        setTimeout(() => setStatus('Ready'), 2000);
      } catch (e) {
        console.error('Copy failed:', e);
      }
    });

    downloadBtn.addEventListener('click', () => {
      if (!lastResponse) return;
      const blob = new Blob([JSON.stringify(lastResponse, null, 2)], { type: "application/json" });
      const a = document.createElement("a");
      a.href = URL.createObjectURL(blob);
      a.download = "transcript.json";
      a.click();
      URL.revokeObjectURL(a.href);
    });

    // Navigation
    $('#archiveLink').addEventListener('click', (e) => {
      e.preventDefault();
      openModal(archiveModal);
      if (!isLoggedIn) {
        $('#archiveContent').innerHTML = `
          <p style="color: var(--text-secondary); text-align: center; padding: 20px;">
            You must be logged in to view your archive history.
          </p>
        `;
      } else {
        $('#archiveContent').innerHTML = `
          <div class="entry-list">
            <div class="entry-item">
              <div class="entry-date">September 12, 2025</div>
              <div class="entry-preview">Feeling grateful today for the small moments...</div>
            </div>
            <div class="entry-item">
              <div class="entry-date">September 11, 2025</div>
              <div class="entry-preview">Had a productive day, accomplished my goals...</div>
            </div>
            <div class="entry-item">
              <div class="entry-date">September 10, 2025</div>
              <div class="entry-preview">Reflected on personal growth and future plans...</div>
            </div>
          </div>
        `;
      }
    });

    $('#accountLink').addEventListener('click', (e) => {
      e.preventDefault();
      if (currentUser) {
        $('#accountEmail').value = currentUser.email;
        $('#accountFirstName').value = currentUser.firstName;
        $('#accountLastName').value = currentUser.lastName;
      } else {
        $('#accountEmail').value = 'Not logged in';
        $('#accountFirstName').value = 'Guest';
        $('#accountLastName').value = 'User';
      }
      openModal(accountModal);
    });

    $('#logoutBtn').addEventListener('click', () => {
      currentUser = null;
      isLoggedIn = false;
      localStorage.removeItem('minuet_user');
      closeModal(accountModal);
      showScreen('login');
    });

    $('#closeAccountBtn').addEventListener('click', () => {
      closeModal(accountModal);
    });

    $('#closeArchiveBtn').addEventListener('click', () => {
      closeModal(archiveModal);
    });

    // Report
    if (viewReportBtn) {
      viewReportBtn.addEventListener('click', () => {
        showScreen('report');
      });
    }

    downloadReportBtn.addEventListener('click', () => {
      openModal(downloadModal);
    });

    $('#downloadTodayBtn').addEventListener('click', () => {
      alert('Downloading today\'s report...');
      closeModal(downloadModal);
    });

    $('#downloadOverallBtn').addEventListener('click', () => {
      alert('Downloading overall review...');
      closeModal(downloadModal);
    });

    $('#closeDownloadBtn').addEventListener('click', () => {
      closeModal(downloadModal);
    });

    // About Us
    $('#aboutUsBtn').addEventListener('click', (e) => {
      e.preventDefault();
      openModal(aboutModal);
    });

    $('#closeAboutBtn').addEventListener('click', () => {
      closeModal(aboutModal);
    });

    // Back to Home function
    window.backToHome = function() {
      showScreen('app');
    };

    // ===========================
    // Initialization
    // ===========================
    window.addEventListener('load', () => {
      // Check for saved user
      const savedUser = localStorage.getItem('minuet_user');
      if (savedUser) {
        currentUser = JSON.parse(savedUser);
        userName.textContent = currentUser.firstName;
        isLoggedIn = true;
        showScreen('app');
      }
      
      // Generate calendar
      generateCalendar();
      
      // Set initial status
      setStatus('Ready');
    });

    // Easter egg for title hover
    $('#mainTitle').addEventListener('mouseenter', () => {
      // Audio waveform effect is handled in CSS
    });
  </script>
</body>
</html>
